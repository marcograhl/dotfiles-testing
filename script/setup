#!/bin/bash

set -e

un="$(uname)"
case "${un}" in
  Linux)
    ostype=linux
    homebrew_prefix_default=/home/linuxbrew/.linuxbrew
    ;;
  Darwin)
    ostype=macos
    if [[ "$(uname -m)" == "arm64" ]]
    then
      homebrew_prefix_default=/opt/homebrew
    else
      homebrew_prefix_default=/usr/local
    fi
esac

# Install homebrew if it doesn't exist
if [[ ! -d "${homebrew_prefix_default}" ]]
then
  CI=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

if [ -n $CODESPACES ]
then
  # Codespaces has a .gitconfig already setup, but in order to take advantage of
  # the attributes set in /etc/gitconfig we have to explicitly include the path.
  git config --global include.path /etc/gitconfig

  dotfiles_dir="/workspaces/.codespaces/.persistedshare/dotfiles"

  # Symlink all of the dotfiles to the $HOME directory
  for dotfile in .*; do
    # Skip . and .. directories
    echo $dotfile | egrep -q '^(\.+)$' && continue

    # Skip .git directory
    echo $dotfile | egrep -q '^(\.git)$' && continue

    source="$dotfiles_dir/$dotfile"
    destination="$HOME/$dotfile"

    # If the directory already exists in the $HOME directory then we'll
    # just symlink the contents rather than the directory itself.
    if [ -d $destination ] && ! [ -L $destination ]
    then
      for file in $source/*
      do
        ln -sfv "$file" "$destination"
      done
      continue
    fi

    [ -d $dotfile ] && dotfile="$dotfile/"

    if [ -L $destination ] && ! [ -d $dotfile ]
    then
      ln -sfv "$source" "$destination"
    else
      [ -d $destination ] && rm -rv "$destination" 2>/dev/null
      ln -sv "$source" "$destination"
    fi
  done

  # Bring in all of our submodule dependencies
  git submodule update --init --recursive || true
  git submodule foreach --recursive git reset --hard
elif [ ! -d $HOME/.dotfiles ]
then
  # https://www.atlassian.com/git/tutorials/dotfiles
  git clone --bare https://github.com/tarebyte/dotfiles.git $HOME/.dotfiles

  function dconfig {
    /usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME $@
  }

  dconfig checkout
  dconfig status.showUntrackedFiles no

  # Bring in all of our submodule dependencies
  dconfig submodule update --recursive --init
fi

if [ "${ostype}" == macos ]
then
  brew bundle --global

  echo $(which fish) | sudo tee -a /etc/shells
  chsh -s $(which fish)
elif [ -n $CODESPACES ]
then
  # https://github.com/djensenius/dotfiles/blob/1d25e46179285f7f8180ffdf8ad4aae53f35323c/install.sh#L22-L24
  echo 'eval "$($/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ${HOME}/.profile
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

  sleep 5

  # These are a pain to install manually.
  brew install autojump diff-so-fancy fish
  brew install --HEAD universal-ctags/universal-ctags/universal-ctags

  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install --bin

  gh release download --repo neovim/neovim --pattern "nvim-linux64.deb" --dir /tmp
  sudo apt-get install /tmp/nvim-linux64.deb

  gh release download --repo BurntSushi/ripgrep --pattern "ripgrep_*_amd64.deb" --dir /tmp

  ripgrep_version=$(ls /tmp | grep ripgrep_* | cut -d _ -f 2)
  sudo dpkg -i "/tmp/ripgrep_${ripgrep_version}_amd64.deb"

  gh release download --repo nelsonenzo/tmux-appimage --pattern "tmux.appimage" --dir /tmp

  chmod +x /tmp/tmux.appimage
  sudo mv /tmp/tmux.appimage /usr/local/bin/tmux

  gh release download --repo sharkdp/bat -p "bat_*_i686.deb" --dir /tmp

  bat_version=$(ls /tmp | grep bat_* | cut -d _ -f 2)
  sudo dpkg -i "/tmp/bat_${bat_version}_i686.deb"

  curl -sS https://starship.rs/install.sh | sh

  # We want Homebrew fish as our default shell
  if ! grep -q "vscode.*/bin/fish" /etc/passwd
  then
    echo "${homebrew_prefix_default}/bin/fish" | sudo tee -a /etc/shells
    sudo chsh -s "${homebrew_fish_path}/bin/fish" vscode
  fi
fi

# Install fisher plugins
echo "curl -sL https://git.io/fisher | source && fisher update" | "${homebrew_prefix_default}/bin/fish"

# Set the theme
echo "base16-ocean" | "${homebrew_prefix_default}/bin/fish"

# Install Neovim packages via packer
nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'

echo "All set!"
